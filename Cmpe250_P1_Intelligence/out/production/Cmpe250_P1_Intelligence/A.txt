public void remove(float gms) {
        boss = remove(gms, boss);
        boss = balance(boss);
    }

    boolean isReplacedDuplicateRemoved = true;

    //INTERNAL METHOD FOR REMOVE
    private Member remove(float element, Member node) {
        if (node == null) {
            return node;
        } else if (element < node.gms) {
            node.left = remove(element, node.left);
        } else if (element > node.gms) {
            node.right = remove(element, node.right);
        } else {
            if (node.left == null || node.right == null) {
                Member temp = (node.left == null) ? node.right : node.left;

                //CHECK FOR THE PRINTING PROCESS
                processNodeRemoval(node, temp);
                node = temp;
            } else {
                Member temp = findMin(node.right);
                processNodeRemoval(node, temp);
                copyNodeData(node, temp);
                node.right = remove(node.gms, node.right);
            }
        }
        return balance(node);
    }
    //CHECKER FOR THE PRINTING PROCESS
    private void processNodeRemoval(Member parent, Member child) {
        if (child == null) {
            if (isReplacedDuplicateRemoved) {
                System.out.println(parent.name + " left the family, replaced by nobody");
            } else {
                isReplacedDuplicateRemoved = true;
            }
            if (parent.left == child) {
                parent.left = null;
            } else {
                parent.right = null;
            }
        } else {
            if (isReplacedDuplicateRemoved) {
                System.out.println(parent.name + " left the family, replaced by " + child.name);
            } else {
                isReplacedDuplicateRemoved = true;
            }
            if (parent.left == child) {
                parent.left = child;
            } else {
                parent.right = child;
            }
        }
    }

    private void copyNodeData(Member dest, Member source) {
        dest.name = source.name;
        dest.gms = source.gms;

        if (dest != source) {
            isReplacedDuplicateRemoved = false;
        }
